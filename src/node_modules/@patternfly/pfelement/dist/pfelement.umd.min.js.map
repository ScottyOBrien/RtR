{"version":3,"file":"pfelement.umd.min.js","sources":["../../../node_modules/ie-array-find-polyfill/index.js","../../../node_modules/string-includes-polyfill/string-includes-polyfill.js","../_temp/reveal.js","../_temp/props-and-attrs.js","../_temp/pfelement.umd.js"],"sourcesContent":["'use strict';\nif (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n        value: function (predicate) {\n\n            if (this == null) {\n                throw new TypeError('this is null or not defined');\n            }\n\n            var obj = Object(this);\n            var len = obj.length >>> 0;\n\n            if (typeof predicate !== 'function') {\n                throw new TypeError('predicate must be a function');\n            }\n\n            var thisArg = arguments[1];\n\n            var index = 0;\n\n            while (index < len) {\n                var iValue = obj[index];\n                if (predicate.call(thisArg, iValue, index, obj)) {\n                    return iValue;\n                }\n                index++;\n            }\n\n            return undefined;\n        }\n    });\n}","if (!String.prototype.includes) {\r\n    String.prototype.includes = function (search, start) {\r\n        'use strict';\r\n        if (typeof start !== 'number') {\r\n            start = 0;\r\n        }\r\n\r\n        if (start + search.length > this.length) {\r\n            return false;\r\n        } else {\r\n            return this.indexOf(search, start) !== -1;\r\n        }\r\n    };\r\n}\r\n","let logger = () => null;\n\nexport function reveal() {\n  logger(`[reveal] elements ready, revealing the body`);\n  window.document.body.removeAttribute(\"unresolved\");\n}\n\nexport function autoReveal(logFunction) {\n  logger = logFunction;\n  // If Web Components are already ready, run the handler right away.  If they\n  // are not yet ready, wait.\n  //\n  // see https://github.com/github/webcomponentsjs#webcomponents-loaderjs for\n  // info about web component readiness events\n  const polyfillPresent = window.WebComponents;\n  const polyfillReady = polyfillPresent && window.WebComponents.ready;\n\n  if (!polyfillPresent || polyfillReady) {\n    handleWebComponentsReady();\n  } else {\n    window.addEventListener(\"WebComponentsReady\", handleWebComponentsReady);\n  }\n}\n\nfunction handleWebComponentsReady() {\n  logger(\"[reveal] web components ready\");\n  reveal();\n}\n","function parseFunction(value) {\n  try {\n    if (typeof fn === \"string\") {\n      return new Function(`return ${fn}`)();\n    } else if (typeof fn === \"function\") {\n      return fn;\n    } else {\n      return new Function();\n    }\n  } catch (e) {\n    return null;\n  }\n}\n\nexport const propsAndAttrsAPI = {\n  object: {\n    prop: {\n      setter: function(privatePropName, value, onChange) {\n        const oldValue = this[privatePropName];\n        this[privatePropName] = value;\n        if (onChange) onChange(this, oldValue, value);\n      },\n      getter: function(privatePropName) {\n        return this[privatePropName];\n      },\n      define: function(propName, privatePropName, onChange) {\n        if (!privatePropName) {\n          privatePropName = \"_\" + propName;\n        }\n        this[privatePropName] = {};\n        Object.defineProperty(this, propName, {\n          set: v => {\n            propsAndAttrsAPI.object.prop.setter.bind(this)(\n              privatePropName,\n              v,\n              onChange\n            );\n          },\n          get: () =>\n            propsAndAttrsAPI.object.prop.getter.bind(this)(privatePropName),\n          enumerable: true\n        });\n      }\n    },\n    attr: {\n      parse: function(stringValue) {\n        return JSON.parse(stringValue);\n      },\n      onChange: function(propName, attrName, oldValue, newValue) {\n        this[propName] = propsAndAttrsAPI.object.attr.parse.bind(this)(\n          newValue\n        );\n      }\n    }\n  },\n  alias: {\n    prop: {\n      setter: function(aliasedPropName, value) {\n        this[aliasedPropName] = value;\n      },\n      getter: function(aliasedPropName) {\n        return this[aliasedPropName];\n      },\n      define: function(propName, aliasedPropName) {\n        Object.defineProperty(this, propName, {\n          set: v =>\n            propsAndAttrsAPI.alias.prop.setter.bind(this)(aliasedPropName, v),\n          get: () =>\n            propsAndAttrsAPI.alias.prop.getter.bind(this)(aliasedPropName),\n          enumerable: true\n        });\n      }\n    }\n  },\n  boolean: {\n    prop: {\n      setter: function(attrName, value) {\n        if (value) {\n          this.setAttribute(attrName, \"\");\n        } else {\n          this.removeAttribute(attrName);\n        }\n      },\n      getter: function(attrName) {\n        return (\n          this.hasAttribute(attrName) && this.getAttribute(attrName) !== \"false\"\n        );\n      },\n      define: function(propName, attrName) {\n        Object.defineProperty(this, propName, {\n          set: v =>\n            propsAndAttrsAPI.boolean.prop.setter.bind(this)(attrName, v),\n          get: () => propsAndAttrsAPI.boolean.prop.getter.bind(this)(attrName),\n          enumerable: true\n        });\n      }\n    },\n    attr: {\n      onChange: function(oldValue, newValue, onChangeCallback) {\n        // check if the value went from being there to not being there and vice-versa, and if there is an actual function to call\n        if (\n          onChangeCallback &&\n          propsAndAttrsAPI.boolean.attr.hasChanged(oldValue, newValue)\n        ) {\n          onChangeCallback(this, oldValue, newValue);\n        }\n      },\n      hasChanged: (oldValue, newValue) => {\n        const oldValueIsFalse = oldValue == null || oldValue === \"false\";\n        const newValueIsFalse = newValue == null || newValue === \"false\";\n        return oldValueIsFalse !== newValueIsFalse;\n      }\n    }\n  },\n  string: {\n    prop: {\n      setter: function(attrName, value) {\n        if (value != null) {\n          this.setAttribute(attrName, value);\n        } else {\n          this.removeAttribute(attrName);\n        }\n      },\n      getter: function(attrName) {\n        if (this.hasAttribute(attrName)) {\n          return this.getAttribute(attrName);\n        }\n        return null;\n      },\n      define: function(propName, attrName) {\n        Object.defineProperty(this, propName, {\n          set: v => propsAndAttrsAPI.string.prop.setter.bind(this)(attrName, v),\n          get: () => propsAndAttrsAPI.string.prop.getter.bind(this)(attrName),\n          enumerable: true\n        });\n      }\n    }\n  },\n  function: {\n    prop: {\n      // mostly like for object\n      setter: function(privatePropName, value, onChange) {\n        const oldValue = this[privatePropName];\n        this[privatePropName] = value;\n        if (onChange) onChange(this, oldValue, value);\n      },\n      getter: function(privatePropName) {\n        return this[privatePropName];\n      },\n      define: function(propName, privatePropName, onChange) {\n        if (!privatePropName) {\n          privatePropName = \"_\" + propName;\n        }\n        this[privatePropName] = {};\n        Object.defineProperty(this, propName, {\n          set: v => {\n            propsAndAttrsAPI.function.prop.setter.bind(this)(\n              privatePropName,\n              v,\n              onChange\n            );\n          },\n          get: () =>\n            propsAndAttrsAPI.function.prop.getter.bind(this)(privatePropName),\n          enumerable: true\n        });\n      }\n    },\n    attr: {\n      parse: value => parseFunction(value),\n      onChange: function(propName, attrName, oldValue, newValue) {\n        this[propName] = propsAndAttrsAPI.function.attr.parse.bind(this)(\n          newValue\n        );\n      }\n    }\n  },\n  number: {\n    prop: {\n      setter: function(attrName, value) {\n        if (value != null && !isNaN(value)) {\n          this.setAttribute(attrName, value);\n        } else {\n          this.removeAttribute(attrName);\n        }\n      }\n    }\n  }\n};\n\nexport class PropAndAttr {\n  constructor(type, attrName, propName, onChangeCallback) {\n    this.type = type;\n    this.attrName = attrName;\n    this.propName = propName;\n    this.onChangeCallback = onChangeCallback;\n    if (!attrName && !propName) {\n      throw new Error(\n        \"attribute name and property name are not defined. You need to define at least one\"\n      );\n    }\n  }\n\n  get attrIsObserved() {\n    // to be checked\n    return this.attrName && this.onChangeCallback;\n  }\n\n  /**\n   *\n   * @param {PFElement} pfeInstance\n   */\n  instanceConstructorLogic(pfeInstance) {\n    if (this.propName) {\n      this.defineProp(pfeInstance);\n    }\n  }\n\n  /**\n   *\n   * @param {PFElement} pfeInstance\n   */\n  getDefineFn(pfeInstance) {\n    return propsAndAttrsAPI[this.type].prop.define.bind(pfeInstance);\n  }\n\n  /**\n   *  to do: redo for each prop type / class\n   * @param {PFElement} pfeInstance\n   */\n  defineProp(pfeInstance) {\n    this.getDefineFn(pfeInstance)(this.propName);\n  }\n\n  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {\n    this.onChangeCallback(pfeInstance, oldValue, newValue);\n  }\n}\n\nexport class ObjectPropAndAttr extends PropAndAttr {\n  constructor(attrName, propName, onChangeCallback, privatePropName) {\n    super(\"object\", attrName, propName, onChangeCallback);\n    if (this.propName) {\n      this.privatePropName = privatePropName || \"_\" + this.propName;\n    }\n  }\n\n  /**\n   *\n   * @param {PFElement} pfeInstance\n   */\n  defineProp(pfeInstance) {\n    this.getDefineFn(pfeInstance)(\n      this.propName,\n      this.privatePropName,\n      this.onChangeCallback\n    );\n  }\n\n  get attrIsObserved() {\n    return !!this.attrName;\n  }\n\n  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {\n    if (this.propName) {\n      propsAndAttrsAPI.object.onChange.bind(pfeInstance)(\n        this.propName,\n        this.attrName,\n        oldValue,\n        newValue\n      );\n    }\n  }\n}\n\nexport class StringPropAndAttr extends PropAndAttr {\n  constructor(attrName, propName, onChangeCallback, privatePropName) {\n    super(\"string\", attrName, propName, onChangeCallback);\n    if (!this.attrName) {\n      this.privatePropName = privatePropName || \"_\" + this.propName;\n    }\n  }\n\n  /**\n   *\n   * @param {PFElement} pfeInstance\n   */\n  defineProp(pfeInstance) {\n    if (this.attrName) {\n      this.getDefineFn(pfeInstance)(this.propName, this.attrName);\n    } else {\n      Object.defineProperty(pfeInstance, this.propName, {\n        set: v => {\n          const oldValue = pfeInstance[this.privatePropName];\n          pfeInstance[this.privatePropName] = v;\n          if (this.onChangeCallback) {\n            this.onChangeCallback(pfeInstance, oldValue, v);\n          }\n        },\n        get: () => pfeInstance[this.privatePropName],\n        enumerable: true\n      });\n    }\n  }\n}\n\nexport class AliasPropAndAttr extends PropAndAttr {\n  constructor(attrName, propName, aliasedPropName, aliasedAttrName) {\n    super(\"alias\", attrName, propName, undefined);\n    this.aliasedPropName = aliasedPropName;\n    this.aliasedAttrName = aliasedAttrName;\n    if (!aliasedAttrName && !aliasedAttrName) {\n      throw new Error(\n        \"Aliased property has no aliasedPropName and aliasedAttrName\"\n      );\n    }\n  }\n\n  /**\n   *\n   * @param {PFElement} pfeInstance\n   */\n  defineProp(pfeInstance) {\n    if (this.aliasedPropName) {\n      this.getDefineFn(pfeInstance)(this.propName, this.aliasedPropName);\n    } else if (this.aliasedAttrName) {\n      Object.defineProperty(pfeInstance, this.propName, {\n        set: v => {\n          pfeInstance.setAttribute(this.aliasedAttrName, v);\n        },\n        get: () =>\n          pfeInstance.hasAttribute(this.aliasedAttrName) &&\n          pfeInstance.getAttribute(this.aliasedAttrName),\n        enumerable: true\n      });\n    }\n  }\n\n  get attrIsObserved() {\n    return !!this.attrName;\n  }\n\n  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {\n    if (this.aliasedAttrName) {\n      pfeInstance.setAttribute(this.aliasedAttrName, newValue);\n    } else if (this.aliasedPropName) {\n      pfeInstance[this.aliasedPropName] = newValue;\n    }\n  }\n}\n\nexport class BooleanPropAndAttr extends PropAndAttr {\n  constructor(attrName, propName, onChangeCallback, privatePropName) {\n    super(\"boolean\", attrName, propName, onChangeCallback);\n    if (!attrName) {\n      this.privatePropName = privatePropName || \"_\" + propName;\n    }\n  }\n\n  defineProp(pfeInstance) {\n    if (this.attrName) {\n      this.getDefineFn(pfeInstance)(this.propName, this.attrName);\n    } else {\n      Object.defineProperty(pfeInstance, this.propName, {\n        set: v => {\n          const oldValue = pfeInstance[this.privatePropName];\n          pfeInstance[this.privatePropName] = !!v;\n          if (this.onChangeCallback) {\n            this.onChangeCallback(pfeInstance, oldValue, v);\n          }\n        },\n        get: () => pfeInstance[this.privatePropName],\n        enumerable: true\n      });\n    }\n  }\n}\n\nexport class FunctionPropAndAttr extends PropAndAttr {\n  constructor(attrName, propName, onChangeCallback, privatePropName) {\n    super(\"function\", attrName, propName, onChangeCallback);\n    if (!propName || typeof propName !== \"string\") {\n      throw new Error(\"propName must be a non-empty string for functions\");\n    }\n    this.privatePropName = privatePropName || \"_\" + propName;\n  }\n\n  defineProp(pfeInstance) {\n    this.getDefineFn(pfeInstance)(\n      this.propName,\n      this.privatePropName,\n      this.onChangeCallback\n    );\n  }\n\n  get attrIsObserved() {\n    return !!this.attrName;\n  }\n\n  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {\n    propsAndAttrsAPI.object.onChange.bind(pfeInstance)(\n      this.propName,\n      this.attrName,\n      oldValue,\n      newValue\n    );\n  }\n}\n\nexport class NumberPropAndAttr extends PropAndAttr {\n  constructor(type, attrName, propName, onChangeCallback, privatePropName) {\n    super(type, attrName, propName, onChangeCallback);\n    if (!attrName || privatePropName) {\n      this.privatePropName = privatePropName || \"_\" + propName;\n    }\n  }\n\n  parse(value) {\n    return Number(value);\n  }\n\n  defineProp(pfeInstance) {\n    if (this.privatePropName && this.attrName) {\n      throw new Error(\n        \"Not implemented yet for \" + this.type + \" prop and attribute\"\n      );\n    } else if (this.attrName) {\n      Object.defineProperty(pfeInstance, this.propName, {\n        set: v => {\n          propsAndAttrsAPI.number.prop.setter.bind(pfeInstance)(\n            this.attrName,\n            v\n          );\n        },\n        get: () => {\n          if (pfeInstance.hasAttribute(this.attrName)) {\n            return this.parse(pfeInstance.getAttribute(this.attrName));\n          }\n        },\n        enumerable: true\n      });\n    } else {\n      Object.defineProperty(pfeInstance, this.propName, {\n        set: v => {\n          const oldValue = pfeInstance[this.privatePropName];\n          pfeInstance[this.privatePropName] = v;\n        },\n        get: () => pfeInstance[this.privatePropName],\n        enumerable: true\n      });\n    }\n  }\n\n  get attrIsObserved() {\n    return super.attrIsObserved || (this.privatePropName && this.attrName);\n  }\n\n  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {\n    if (this.privatePropName && this.attrName) {\n      throw new Error(\n        \"Not implemented yet for \" + this.type + \" prop and attribute\"\n      );\n    } else {\n      const oldNum = this.parse(oldValue);\n      const newNum = this.parse(newValue);\n      this.onChangeCallback(pfeInstance, oldNum, newNum);\n    }\n  }\n}\n\nexport class IntPropAndAttr extends NumberPropAndAttr {\n  constructor(attrName, propName, onChangeCallback) {\n    super(\"integer\", attrName, propName, onChangeCallback);\n  }\n\n  parse(value) {\n    return parseInt(value);\n  }\n}\n\nexport class FloatPropAndAttr extends NumberPropAndAttr {\n  constructor(attrName, propName, onChangeCallback) {\n    super(\"float\", attrName, propName, onChangeCallback);\n  }\n\n  parse(value) {\n    return parseFloat(value);\n  }\n}\n\nconst errorWrapperElementNotDefined = new Error(\n  \"The wrapped element is not yet obtainable. The property must be set in a different way, or after the wrapped element is obtainable\"\n);\n\nexport class WrappedPropAndAttr extends PropAndAttr {\n  constructor(\n    attrName,\n    propName,\n    onChangeCallback,\n    getWrappedElementFn,\n    wrappedAttrName,\n    wrappedPropName\n  ) {\n    super(\"wrapped\", attrName, propName, onChangeCallback);\n    if (typeof getWrappedElementFn !== \"function\") {\n      throw new Error(\n        \"getWrappedElementFn must be a function that returns an html element for wrapped prop and attr type\"\n      );\n    }\n    if (!wrappedAttrName && !wrappedPropName) {\n      throw new Error(\n        \"one of wrappedAttrName and wrappedPropName must be defined, for wrapped prop and attr type\"\n      );\n    }\n    this.getWrappedElementFn = getWrappedElementFn;\n    this.wrappedAttrName = wrappedAttrName;\n    this.wrappedPropName = wrappedPropName;\n  }\n\n  updateAttrFromWrappedAttribute(pfeInstance) {\n    const wrappedEl = this.getWrappedElementFn(pfeInstance);\n    if (wrappedEl) {\n      if (wrappedEl.hasAttribute(this.wrappedAttrName)) {\n        pfeInstance.setAttribute(\n          this.attrName,\n          wrappedEl.getAttribute(this.wrappedAttrName)\n        );\n      } else {\n        pfeInstance.removeAttribute(this.attrName);\n      }\n    } else {\n      throw errorWrapperElementNotDefined;\n    }\n  }\n\n  updateWrappedAttribute(pfeInstance, value) {\n    const wrappedEl = this.getWrappedElementFn(pfeInstance);\n    if (wrappedEl) {\n      if (value != null) {\n        wrappedEl.setAttribute(this.wrappedAttrName, value);\n      } else {\n        wrappedEl.removeAttribute(this.wrappedAttrName);\n      }\n    } else {\n      throw errorWrapperElementNotDefined;\n    }\n  }\n\n  defineProp(pfeInstance) {\n    const attributes = { enumerable: true };\n\n    if (this.wrappedPropName) {\n      attributes.set = v => {\n        const wrappedEl = this.getWrappedElementFn(pfeInstance);\n        if (wrappedEl) {\n          const oldValue = pfeInstance[this.propName];\n          wrappedEl[this.wrappedPropName] = v;\n          if (this.wrappedAttrName && this.attrName) {\n            this.updateAttrFromWrappedAttribute(pfeInstance);\n          } else if (this.onChangeCallback) {\n            this.onChangeCallback(\n              pfeInstance,\n              oldValue,\n              pfeInstance[this.propName]\n            );\n          }\n        } else {\n          // this could be implemented in the future\n          throw errorWrapperElementNotDefined;\n        }\n        // to do! add onchange somewhere\n      };\n      attributes.get = () => {\n        const wrappedEl = this.getWrappedElementFn(pfeInstance);\n        if (wrappedEl) {\n          return wrappedEl[this.wrappedPropName];\n        } else {\n          throw errorWrapperElementNotDefined;\n        }\n      };\n    } else {\n      // wrappedAttrName\n\n      attributes.set = v => {\n        const wrappedEl = this.getWrappedElementFn(pfeInstance);\n        if (wrappedEl) {\n          const oldValue = pfeInstance[this.propName];\n          this.updateWrappedAttribute(pfeInstance, v);\n          if (this.attrName) {\n            this.updateAttrFromWrappedAttribute(pfeInstance);\n          } else if (this.onChangeCallback) {\n            this.onChangeCallback(\n              pfeInstance,\n              oldValue,\n              pfeInstance[this.propName]\n            );\n          }\n        } else {\n          throw errorWrapperElementNotDefined;\n        }\n      };\n      attributes.get = () => {\n        const wrappedEl = this.getWrappedElementFn(pfeInstance);\n        if (wrappedEl) {\n          if (wrappedEl.hasAttribute(this.wrappedAttrName)) {\n            return wrappedEl.getAttribute(this.wrappedAttrName);\n          }\n        } else {\n          throw errorWrapperElementNotDefined;\n        }\n      };\n    }\n\n    Object.defineProperty(pfeInstance, this.propName, attributes);\n  }\n\n  get attrIsObserved() {\n    return !!this.attrName;\n  }\n\n  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {\n    const wrapperEl = this.getWrappedElementFn(pfeInstance);\n    if (wrapperEl) {\n      if (oldValue !== newValue) {\n        if (this.wrappedAttrName) {\n          this.updateWrappedAttribute(pfeInstance, newValue);\n          this.updateAttrFromWrappedAttribute(pfeInstance);\n        } else if (this.propName) {\n          pfeInstance[this.propName] = newValue;\n        }\n        if (this.onChangeCallback) {\n          this.onChangeCallback(pfeInstance, oldValue, newValue);\n        }\n      }\n    } else {\n      throw errorWrapperElementNotDefined;\n    }\n  }\n}\n","/*!\n * PatternFly Elements: PFElement 2.1.0-alpha.1\n * @license\n * Copyright 2020 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport \"ie-array-find-polyfill\";\nimport \"string-includes-polyfill\";\nimport { autoReveal } from \"./reveal.js\";\nimport {\n  PropAndAttr,\n  WrappedPropAndAttr,\n  NumberPropAndAttr,\n  AliasPropAndAttr,\n  BooleanPropAndAttr,\n  FloatPropAndAttr,\n  FunctionPropAndAttr,\n  IntPropAndAttr,\n  ObjectPropAndAttr,\n  StringPropAndAttr\n} from \"./props-and-attrs\";\nconst prefix = \"pfe-\";\n\nclass PFElement extends HTMLElement {\n  static create(pfe) {\n    window.customElements.define(pfe.tag, pfe);\n  }\n\n  /**\n   *\n   * @returns {PropAndAttr[]}\n   */\n  static get propsAndAttrs() {\n    return [];\n  }\n\n  static get propsAndAttrsAPI() {\n    return {\n      alias: AliasPropAndAttr,\n      boolean: BooleanPropAndAttr,\n      float: FloatPropAndAttr,\n      function: FunctionPropAndAttr,\n      integer: IntPropAndAttr,\n      number: NumberPropAndAttr,\n      object: ObjectPropAndAttr,\n      string: StringPropAndAttr,\n      wrapped: WrappedPropAndAttr\n    };\n  }\n\n  propsAndAttrsConstructorLogic() {\n    this._pfeClass.propsAndAttrs.forEach(propAndAttrInstance =>\n      propAndAttrInstance.instanceConstructorLogic(this)\n    );\n  }\n\n  propsAndAttrsOnAttributeChangedLogic(attrName, oldValue, newValue) {\n    const foundElements = this._pfeClass.propsAndAttrs.filter(\n      propAndAttrInstance => propAndAttrInstance.attrName === attrName\n    );\n    if (foundElements.length) {\n      if (foundElements.length > 1) {\n        throw new Error(\n          \"more than one attribute with the same name has been defined in propAndAttr api\"\n        );\n      }\n      foundElements[0].onAttributeChangedLogic(this, oldValue, newValue);\n    }\n  }\n\n  static get propAndAttrsObservedAttributes() {\n    return this.propsAndAttrs\n      .filter(propAndAttrInstance => propAndAttrInstance.attrIsObserved)\n      .map(propAndAttrInstance => propAndAttrInstance.attrName);\n  }\n\n  static debugLog(preference = null) {\n    if (preference !== null) {\n      PFElement._debugLog = !!preference;\n    }\n    return PFElement._debugLog;\n  }\n\n  static log(...msgs) {\n    if (PFElement.debugLog()) {\n      console.log(...msgs);\n    }\n  }\n\n  static get PfeTypes() {\n    return {\n      Container: \"container\",\n      Content: \"content\",\n      Combo: \"combo\"\n    };\n  }\n\n  static get version() {\n    return \"{{version}}\";\n  }\n\n  static get observedAttributes() {\n    return [\"pfe-theme\", ...this.propAndAttrsObservedAttributes];\n  }\n\n  get randomId() {\n    return Math.random()\n      .toString(36)\n      .substr(2, 9);\n  }\n\n  get version() {\n    return this._pfeClass.version;\n  }\n\n  get pfeType() {\n    return this.getAttribute(`${prefix}type`);\n  }\n\n  set pfeType(value) {\n    this.setAttribute(`${prefix}type`, value);\n  }\n\n  cssVariable(name, value, element = this) {\n    name = name.substr(0, 2) !== \"--\" ? \"--\" + name : name;\n    if (value) {\n      element.style.setProperty(name, value);\n    }\n    return window\n      .getComputedStyle(element)\n      .getPropertyValue(name)\n      .trim();\n  }\n\n  // Returns a single element assigned to that slot; if multiple, it returns the first\n  has_slot(name) {\n    return this.querySelector(`[slot='${name}']`);\n  }\n\n  // Returns an array with all elements assigned to that slot\n  has_slots(name) {\n    return [...this.querySelectorAll(`[slot='${name}']`)];\n  }\n\n  // Update the theme context for self and children\n  context_update() {\n    const children = this.querySelectorAll(\"[pfelement]\");\n    let theme = this.cssVariable(\"theme\");\n\n    // Manually adding `pfe-theme` overrides the css variable\n    if (this.hasAttribute(\"pfe-theme\")) {\n      theme = this.getAttribute(\"pfe-theme\");\n      // Update the css variable to match the data attribute\n      this.cssVariable(\"theme\", theme);\n    }\n\n    // Update theme for self\n    this.context_set(theme);\n\n    // For each nested, already upgraded component\n    // set the context based on the child's value of --theme\n    // Note: this prevents contexts from parents overriding\n    // the child's context should it exist\n    [...children].map(child => {\n      if (child.connected) {\n        child.context_set(theme);\n      }\n    });\n  }\n\n  // Get the theme variable if it exists, set it as an attribute\n  context_set(fallback) {\n    let theme = this.cssVariable(\"theme\");\n    if (!theme) {\n      theme = this.getAttribute(\"pfe-theme\");\n    }\n    if (!theme && fallback) {\n      theme = fallback;\n    }\n    if (theme) {\n      this.setAttribute(\"on\", theme);\n    }\n  }\n\n  constructor(\n    pfeClass,\n    { type = null, delayRender = false, customRendering = false } = {}\n  ) {\n    super();\n\n    this.connected = false;\n    this._pfeClass = pfeClass;\n    this.tag = pfeClass.tag;\n    this.props = pfeClass.properties;\n    this.slots = pfeClass.slots;\n    this._queue = [];\n\n    if (type) {\n      this._queueAction({\n        type: \"setProperty\",\n        data: {\n          name: \"pfeType\",\n          value: type\n        }\n      });\n    }\n\n    this._connectedCallback = this._connectedCallback.bind(this);\n    this._observer = new MutationObserver(this._connectedCallback); // not used yet, just created\n\n    if (!customRendering) {\n      this.template = document.createElement(\"template\");\n\n      this.log(`Constructing...`);\n\n      if (this.tag !== \"pfe-table\") {\n        this.attachShadow({ mode: \"open\" });\n      }\n\n      if (\n        !delayRender &&\n        (this.tag !== \"pfe-navigation\" ||\n          this.tag !== \"pfe-navigation-main\" ||\n          this.tag !== \"pfe-navigation-item\" ||\n          this.tag !== \"pfe-card\")\n      ) {\n        if (!delayRender) {\n          this.log(`Render...`);\n          this.render();\n          this.log(`Rendered.`);\n        }\n      } else {\n        if (this.tag !== \"pfe-table\") {\n          this.shadowRoot.innerHTML = `<slot></slot>`;\n        }\n      }\n    }\n\n    this.propsAndAttrsConstructorLogic();\n  }\n\n  connectedCallback() {\n    if (\n      this.tag === \"pfe-navigation\" ||\n      this.tag === \"pfe-navigation-main\" ||\n      this.tag === \"pfe-navigation-item\" ||\n      this.tag === \"pfe-card\"\n    ) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          if (this.children.length) {\n            this.render();\n            this._connectedCallback();\n            return resolve();\n          }\n\n          this._observer.observe(this, { childList: true });\n        }, 0);\n      });\n    } else {\n      this._connectedCallback();\n    }\n  }\n\n  _connectedCallback() {\n    this.connected = true;\n    this.log(`Connecting...`);\n\n    if (this.tag !== \"pfe-table\" && window.ShadyCSS) {\n      this.log(`Styling...`);\n      window.ShadyCSS.styleElement(this);\n      // this.temporaryFixIE11EdgeSlotted();\n      this.log(`Styled.`);\n    }\n\n    // Throw a warning if the on attribute was manually added before upgrade\n    if (!this.hasAttribute(\"pfelement\") && this.hasAttribute(\"on\")) {\n      console.warn(\n        `${this.tag}${\n          this.id ? `[#${this.id}]` : ``\n        }: The \"on\" attribute is protected and should not be manually added to a component. The base class will manage this value for you on upgrade.`\n      );\n    }\n\n    // @TODO maybe we should use just the attribute instead of the class?\n    // https://github.com/angular/angular/issues/15399#issuecomment-318785677\n    this.classList.add(\"PFElement\");\n    this.setAttribute(\"pfelement\", \"\");\n\n    if (typeof this.props === \"object\") {\n      this._mapSchemaToProperties(this.tag, this.props);\n      this.log(`Properties attached.`);\n    }\n\n    if (typeof this.slots === \"object\") {\n      this._mapSchemaToSlots(this.tag, this.slots);\n      this.log(`Slots attached.`);\n    }\n\n    if (this._queue.length) {\n      this._processQueue();\n    }\n\n    // Initialize the on attribute if a theme variable is set\n    // do not update the on attribute if a user has manually added it\n    // then trigger an update in nested components\n    this.context_update();\n\n    this.log(`Connected.`);\n  }\n\n  temporaryFixIE11EdgeSlotted() {\n    // ENABLE THIS PATCH WHEN SLOT ARE NOT SUPPORTED\n    const tagName = `${this.tag}`;\n    const getStyleTag = document.head.querySelector(`[scope^=${tagName}]`);\n\n    if (getStyleTag) {\n      let style = Array.from(document.styleSheets).find(item => {\n        if (\n          item.ownerNode &&\n          item.ownerNode.getAttribute(\"scope\").indexOf(tagName) !== -1\n        ) {\n          return item;\n        }\n        return null;\n      });\n      if (style) {\n        let dynamicSlot = \"\";\n        Array.from(style.cssRules || style.rules || []).forEach(rule => {\n          if (\n            rule.selectorText &&\n            typeof rule.cssText === \"string\" &&\n            rule.selectorText.indexOf(\"slot\") > -1\n          ) {\n            dynamicSlot += \" \" + rule.cssText.replace(/>/gi, \"\");\n          } else if (rule && typeof rule.cssText === \"string\") {\n            dynamicSlot += \" \" + rule.cssText;\n          }\n        });\n        if (dynamicSlot) {\n          getStyleTag.innerText = dynamicSlot;\n        }\n      }\n    }\n  }\n\n  disconnectedCallback() {\n    this._observer.disconnect();\n    this.log(`Disconnecting...`);\n\n    this.connected = false;\n\n    this.log(`Disconnected.`);\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    if (this._pfeClass.cascadingAttributes) {\n      const cascadeTo = this._pfeClass.cascadingAttributes[attr];\n      if (cascadeTo) {\n        this._copyAttribute(attr, cascadeTo);\n      }\n\n      if (attr === \"pfe-theme\") {\n        this.context_update();\n      }\n    }\n\n    this.propsAndAttrsOnAttributeChangedLogic(attr, oldVal, newVal);\n  }\n\n  _copyAttribute(name, to) {\n    const recipients = [\n      ...this.querySelectorAll(to),\n      ...this.shadowRoot.querySelectorAll(to)\n    ];\n    const value = this.getAttribute(name);\n    const fname = value == null ? \"removeAttribute\" : \"setAttribute\";\n    for (const node of recipients) {\n      node[fname](name, value);\n    }\n  }\n\n  // Map the imported properties json to real props on the element\n  // @notice static getter of properties is built via tooling\n  // to edit modify src/element.json\n  _mapSchemaToProperties(tag, properties) {\n    this.log(\"Mapping properties...\");\n    // Loop over the properties provided by the schema\n    Object.keys(properties).forEach(attr => {\n      let data = properties[attr];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof data === \"object\") {\n        // Prefix default is true\n        let hasPrefix = true;\n        let attrName = attr;\n        // Set the attribute's property equal to the schema input\n        this[attr] = data;\n        // Initialize the value to null\n        this[attr].value = null;\n\n        if (typeof this[attr].prefixed !== \"undefined\") {\n          hasPrefix = this[attr].prefixed;\n        }\n\n        if (hasPrefix) {\n          attrName = `${prefix}${attr}`;\n        }\n\n        // If the attribute exists on the host\n        if (this.hasAttribute(attrName)) {\n          // Set property value based on the existing attribute\n          this[attr].value = this.getAttribute(attrName);\n        }\n        // Otherwise, look for a default and use that instead\n        else if (data.default) {\n          const dependency_exists = this._hasDependency(tag, data.options);\n          const no_dependencies =\n            !data.options ||\n            (data.options && !data.options.dependencies.length);\n          // If the dependency exists or there are no dependencies, set the default\n          if (dependency_exists || no_dependencies) {\n            this.setAttribute(attrName, data.default);\n            this[attr].value = data.default;\n          }\n        }\n      }\n    });\n\n    this.log(\"Properties mapped.\");\n  }\n\n  // Test whether expected dependencies exist\n  _hasDependency(tag, opts) {\n    // Get any possible dependencies for this attribute to exist\n    let dependencies = opts ? opts.dependencies : [];\n    // Initialize the dependency return value\n    let hasDependency = false;\n    // Check that dependent item exists\n    // Loop through the dependencies defined\n    for (let i = 0; i < dependencies.length; i += 1) {\n      const slot_exists =\n        dependencies[i].type === \"slot\" &&\n        this.has_slots(`${tag}--${dependencies[i].id}`).length > 0;\n      const attribute_exists =\n        dependencies[i].type === \"attribute\" &&\n        this.getAttribute(`${prefix}${dependencies[i].id}`);\n      // If the type is slot, check that it exists OR\n      // if the type is an attribute, check if the attribute is defined\n      if (slot_exists || attribute_exists) {\n        // If the slot does exist, add the attribute with the default value\n        hasDependency = true;\n        // Exit the loop\n        break;\n      }\n    }\n    // Return a boolean if the dependency exists\n    return hasDependency;\n  }\n\n  // Map the imported slots json\n  // @notice static getter of properties is built via tooling\n  // to edit modify src/element.json\n  _mapSchemaToSlots(tag, slots) {\n    this.log(\"Validate slots...\");\n    // Loop over the properties provided by the schema\n    Object.keys(slots).forEach(slot => {\n      let slotObj = slots[slot];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof slotObj === \"object\") {\n        let slotExists = false;\n        let result = [];\n        // If it's a named slot, look for that slot definition\n        if (slotObj.namedSlot) {\n          // Check prefixed slots\n          result = this.has_slots(`${tag}--${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n\n          // Check for unprefixed slots\n          result = this.has_slots(`${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n          // If it's the default slot, look for direct children not assigned to a slot\n        } else {\n          result = [...this.children].filter(\n            child => !child.hasAttribute(\"slot\")\n          );\n\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n        }\n\n        // If the slot exists, attach an attribute to the parent to indicate that\n        if (slotExists) {\n          this.setAttribute(`has_${slot}`, \"\");\n        } else {\n          this.removeAttribute(`has_${slot}`);\n        }\n      }\n    });\n    this.log(\"Slots validated.\");\n  }\n\n  _queueAction(action) {\n    this._queue.push(action);\n  }\n\n  _processQueue() {\n    this._queue.forEach(action => {\n      this[`_${action.type}`](action.data);\n    });\n\n    this._queue = [];\n  }\n\n  _setProperty({ name, value }) {\n    this[name] = value;\n  }\n\n  // @TODO This is a duplicate function to cssVariable above, combine them\n  static var(name, element = document.body) {\n    return window\n      .getComputedStyle(element)\n      .getPropertyValue(name)\n      .trim();\n  }\n\n  var(name) {\n    return PFElement.var(name, this);\n  }\n\n  render() {\n    this.shadowRoot.innerHTML = \"\";\n    this.template.innerHTML = this.html;\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(this.template, this.tag);\n    }\n\n    this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n  }\n\n  log(...msgs) {\n    PFElement.log(`[${this.tag}]`, ...msgs);\n  }\n\n  emitEvent(\n    name,\n    { bubbles = true, cancelable = false, composed = false, detail = {} } = {}\n  ) {\n    this.log(`Custom event: ${name}`);\n    this.dispatchEvent(\n      new CustomEvent(name, {\n        bubbles,\n        cancelable,\n        composed,\n        detail\n      })\n    );\n  }\n\n  getUniqueId(prefix = \"id\") {\n    let id = prefix;\n    for (let i = 1; document.getElementById(id); i++) {\n      id = prefix + \"-\" + i;\n    }\n    return id;\n  }\n}\n\nautoReveal(PFElement.log);\n\nexport default PFElement;\n"],"names":["Array","prototype","find","defineProperty","predicate","this","TypeError","obj","Object","len","length","thisArg","index","iValue","call","String","includes","search","start","indexOf","logger","handleWebComponentsReady","document","body","removeAttribute","propsAndAttrsAPI","privatePropName","value","onChange","oldValue","propName","object","prop","setter","bind","_this","v","getter","stringValue","JSON","parse","attrName","newValue","attr","aliasedPropName","alias","_this2","setAttribute","hasAttribute","getAttribute","boolean","_this3","onChangeCallback","hasChanged","string","_this4","function","_this5","fn","Function","e","isNaN","PropAndAttr","pfeInstance","defineProp","type","define","getDefineFn","Error","ObjectPropAndAttr","_this6","StringPropAndAttr","_this8","_this7","AliasPropAndAttr","aliasedAttrName","_this10","undefined","BooleanPropAndAttr","_this12","FunctionPropAndAttr","NumberPropAndAttr","Number","number","_this15","oldNum","newNum","babelHelpers.get","IntPropAndAttr","parseInt","FloatPropAndAttr","parseFloat","errorWrapperElementNotDefined","WrappedPropAndAttr","wrappedEl","getWrappedElementFn","wrappedAttrName","attributes","enumerable","wrappedPropName","set","_this19","updateAttrFromWrappedAttribute","get","updateWrappedAttribute","prefix","PFElement","HTMLElement","_pfeClass","propsAndAttrs","forEach","propAndAttrInstance","instanceConstructorLogic","foundElements","filter","onAttributeChangedLogic","name","element","substr","style","setProperty","window","getComputedStyle","getPropertyValue","trim","querySelector","querySelectorAll","children","theme","cssVariable","context_set","map","child","connected","fallback","Math","random","toString","version","pfe","customElements","tag","preference","_debugLog","debugLog","log","attrIsObserved","propAndAttrsObservedAttributes","Promise","render","_connectedCallback","resolve","_observer","observe","childList","ShadyCSS","styleElement","warn","id","classList","add","babelHelpers.typeof","props","_mapSchemaToProperties","slots","_mapSchemaToSlots","_queue","_processQueue","context_update","dynamicSlot","tagName","getStyleTag","head","from","styleSheets","item","ownerNode","cssRules","rules","rule","selectorText","cssText","replace","innerText","disconnect","oldVal","newVal","cascadeTo","cascadingAttributes","_copyAttribute","propsAndAttrsOnAttributeChangedLogic","to","recipients","shadowRoot","fname","properties","keys","hasPrefix","dependency_exists","no_dependencies","data","prefixed","default","_hasDependency","options","dependencies","opts","hasDependency","i","slot_exists","has_slots","attribute_exists","slotExists","result","slotObj","slot","namedSlot","nodes","action","push","var","innerHTML","template","html","prepareTemplate","appendChild","content","cloneNode","msgs","bubbles","cancelable","composed","detail","dispatchEvent","CustomEvent","getElementById","pfeClass","delayRender","customRendering","_queueAction","MutationObserver","createElement","attachShadow","mode","propsAndAttrsConstructorLogic","logFunction","polyfillPresent","WebComponents","polyfillReady","ready","addEventListener","autoReveal"],"mappings":"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"}