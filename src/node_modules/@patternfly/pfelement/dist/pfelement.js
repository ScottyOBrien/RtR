if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
        value: function (predicate) {

            if (this == null) {
                throw new TypeError('this is null or not defined');
            }

            var obj = Object(this);
            var len = obj.length >>> 0;

            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }

            var thisArg = arguments[1];

            var index = 0;

            while (index < len) {
                var iValue = obj[index];
                if (predicate.call(thisArg, iValue, index, obj)) {
                    return iValue;
                }
                index++;
            }

            return undefined;
        }
    });
}

if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
        if (typeof start !== 'number') {
            start = 0;
        }

        if (start + search.length > this.length) {
            return false;
        } else {
            return this.indexOf(search, start) !== -1;
        }
    };
}

let logger = () => null;

function reveal() {
  logger(`[reveal] elements ready, revealing the body`);
  window.document.body.removeAttribute("unresolved");
}

function autoReveal(logFunction) {
  logger = logFunction;
  // If Web Components are already ready, run the handler right away.  If they
  // are not yet ready, wait.
  //
  // see https://github.com/github/webcomponentsjs#webcomponents-loaderjs for
  // info about web component readiness events
  const polyfillPresent = window.WebComponents;
  const polyfillReady = polyfillPresent && window.WebComponents.ready;

  if (!polyfillPresent || polyfillReady) {
    handleWebComponentsReady();
  } else {
    window.addEventListener("WebComponentsReady", handleWebComponentsReady);
  }
}

function handleWebComponentsReady() {
  logger("[reveal] web components ready");
  reveal();
}

function parseFunction(value) {
  try {
    if (typeof fn === "string") {
      return new Function(`return ${fn}`)();
    } else if (typeof fn === "function") {
      return fn;
    } else {
      return new Function();
    }
  } catch (e) {
    return null;
  }
}

const propsAndAttrsAPI = {
  object: {
    prop: {
      setter: function(privatePropName, value, onChange) {
        const oldValue = this[privatePropName];
        this[privatePropName] = value;
        if (onChange) onChange(this, oldValue, value);
      },
      getter: function(privatePropName) {
        return this[privatePropName];
      },
      define: function(propName, privatePropName, onChange) {
        if (!privatePropName) {
          privatePropName = "_" + propName;
        }
        this[privatePropName] = {};
        Object.defineProperty(this, propName, {
          set: v => {
            propsAndAttrsAPI.object.prop.setter.bind(this)(
              privatePropName,
              v,
              onChange
            );
          },
          get: () =>
            propsAndAttrsAPI.object.prop.getter.bind(this)(privatePropName),
          enumerable: true
        });
      }
    },
    attr: {
      parse: function(stringValue) {
        return JSON.parse(stringValue);
      },
      onChange: function(propName, attrName, oldValue, newValue) {
        this[propName] = propsAndAttrsAPI.object.attr.parse.bind(this)(
          newValue
        );
      }
    }
  },
  alias: {
    prop: {
      setter: function(aliasedPropName, value) {
        this[aliasedPropName] = value;
      },
      getter: function(aliasedPropName) {
        return this[aliasedPropName];
      },
      define: function(propName, aliasedPropName) {
        Object.defineProperty(this, propName, {
          set: v =>
            propsAndAttrsAPI.alias.prop.setter.bind(this)(aliasedPropName, v),
          get: () =>
            propsAndAttrsAPI.alias.prop.getter.bind(this)(aliasedPropName),
          enumerable: true
        });
      }
    }
  },
  boolean: {
    prop: {
      setter: function(attrName, value) {
        if (value) {
          this.setAttribute(attrName, "");
        } else {
          this.removeAttribute(attrName);
        }
      },
      getter: function(attrName) {
        return (
          this.hasAttribute(attrName) && this.getAttribute(attrName) !== "false"
        );
      },
      define: function(propName, attrName) {
        Object.defineProperty(this, propName, {
          set: v =>
            propsAndAttrsAPI.boolean.prop.setter.bind(this)(attrName, v),
          get: () => propsAndAttrsAPI.boolean.prop.getter.bind(this)(attrName),
          enumerable: true
        });
      }
    },
    attr: {
      onChange: function(oldValue, newValue, onChangeCallback) {
        // check if the value went from being there to not being there and vice-versa, and if there is an actual function to call
        if (
          onChangeCallback &&
          propsAndAttrsAPI.boolean.attr.hasChanged(oldValue, newValue)
        ) {
          onChangeCallback(this, oldValue, newValue);
        }
      },
      hasChanged: (oldValue, newValue) => {
        const oldValueIsFalse = oldValue == null || oldValue === "false";
        const newValueIsFalse = newValue == null || newValue === "false";
        return oldValueIsFalse !== newValueIsFalse;
      }
    }
  },
  string: {
    prop: {
      setter: function(attrName, value) {
        if (value != null) {
          this.setAttribute(attrName, value);
        } else {
          this.removeAttribute(attrName);
        }
      },
      getter: function(attrName) {
        if (this.hasAttribute(attrName)) {
          return this.getAttribute(attrName);
        }
        return null;
      },
      define: function(propName, attrName) {
        Object.defineProperty(this, propName, {
          set: v => propsAndAttrsAPI.string.prop.setter.bind(this)(attrName, v),
          get: () => propsAndAttrsAPI.string.prop.getter.bind(this)(attrName),
          enumerable: true
        });
      }
    }
  },
  function: {
    prop: {
      // mostly like for object
      setter: function(privatePropName, value, onChange) {
        const oldValue = this[privatePropName];
        this[privatePropName] = value;
        if (onChange) onChange(this, oldValue, value);
      },
      getter: function(privatePropName) {
        return this[privatePropName];
      },
      define: function(propName, privatePropName, onChange) {
        if (!privatePropName) {
          privatePropName = "_" + propName;
        }
        this[privatePropName] = {};
        Object.defineProperty(this, propName, {
          set: v => {
            propsAndAttrsAPI.function.prop.setter.bind(this)(
              privatePropName,
              v,
              onChange
            );
          },
          get: () =>
            propsAndAttrsAPI.function.prop.getter.bind(this)(privatePropName),
          enumerable: true
        });
      }
    },
    attr: {
      parse: value => parseFunction(value),
      onChange: function(propName, attrName, oldValue, newValue) {
        this[propName] = propsAndAttrsAPI.function.attr.parse.bind(this)(
          newValue
        );
      }
    }
  },
  number: {
    prop: {
      setter: function(attrName, value) {
        if (value != null && !isNaN(value)) {
          this.setAttribute(attrName, value);
        } else {
          this.removeAttribute(attrName);
        }
      }
    }
  }
};

class PropAndAttr {
  constructor(type, attrName, propName, onChangeCallback) {
    this.type = type;
    this.attrName = attrName;
    this.propName = propName;
    this.onChangeCallback = onChangeCallback;
    if (!attrName && !propName) {
      throw new Error(
        "attribute name and property name are not defined. You need to define at least one"
      );
    }
  }

  get attrIsObserved() {
    // to be checked
    return this.attrName && this.onChangeCallback;
  }

  /**
   *
   * @param {PFElement} pfeInstance
   */
  instanceConstructorLogic(pfeInstance) {
    if (this.propName) {
      this.defineProp(pfeInstance);
    }
  }

  /**
   *
   * @param {PFElement} pfeInstance
   */
  getDefineFn(pfeInstance) {
    return propsAndAttrsAPI[this.type].prop.define.bind(pfeInstance);
  }

  /**
   *  to do: redo for each prop type / class
   * @param {PFElement} pfeInstance
   */
  defineProp(pfeInstance) {
    this.getDefineFn(pfeInstance)(this.propName);
  }

  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {
    this.onChangeCallback(pfeInstance, oldValue, newValue);
  }
}

class ObjectPropAndAttr extends PropAndAttr {
  constructor(attrName, propName, onChangeCallback, privatePropName) {
    super("object", attrName, propName, onChangeCallback);
    if (this.propName) {
      this.privatePropName = privatePropName || "_" + this.propName;
    }
  }

  /**
   *
   * @param {PFElement} pfeInstance
   */
  defineProp(pfeInstance) {
    this.getDefineFn(pfeInstance)(
      this.propName,
      this.privatePropName,
      this.onChangeCallback
    );
  }

  get attrIsObserved() {
    return !!this.attrName;
  }

  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {
    if (this.propName) {
      propsAndAttrsAPI.object.onChange.bind(pfeInstance)(
        this.propName,
        this.attrName,
        oldValue,
        newValue
      );
    }
  }
}

class StringPropAndAttr extends PropAndAttr {
  constructor(attrName, propName, onChangeCallback, privatePropName) {
    super("string", attrName, propName, onChangeCallback);
    if (!this.attrName) {
      this.privatePropName = privatePropName || "_" + this.propName;
    }
  }

  /**
   *
   * @param {PFElement} pfeInstance
   */
  defineProp(pfeInstance) {
    if (this.attrName) {
      this.getDefineFn(pfeInstance)(this.propName, this.attrName);
    } else {
      Object.defineProperty(pfeInstance, this.propName, {
        set: v => {
          const oldValue = pfeInstance[this.privatePropName];
          pfeInstance[this.privatePropName] = v;
          if (this.onChangeCallback) {
            this.onChangeCallback(pfeInstance, oldValue, v);
          }
        },
        get: () => pfeInstance[this.privatePropName],
        enumerable: true
      });
    }
  }
}

class AliasPropAndAttr extends PropAndAttr {
  constructor(attrName, propName, aliasedPropName, aliasedAttrName) {
    super("alias", attrName, propName, undefined);
    this.aliasedPropName = aliasedPropName;
    this.aliasedAttrName = aliasedAttrName;
    if (!aliasedAttrName && !aliasedAttrName) {
      throw new Error(
        "Aliased property has no aliasedPropName and aliasedAttrName"
      );
    }
  }

  /**
   *
   * @param {PFElement} pfeInstance
   */
  defineProp(pfeInstance) {
    if (this.aliasedPropName) {
      this.getDefineFn(pfeInstance)(this.propName, this.aliasedPropName);
    } else if (this.aliasedAttrName) {
      Object.defineProperty(pfeInstance, this.propName, {
        set: v => {
          pfeInstance.setAttribute(this.aliasedAttrName, v);
        },
        get: () =>
          pfeInstance.hasAttribute(this.aliasedAttrName) &&
          pfeInstance.getAttribute(this.aliasedAttrName),
        enumerable: true
      });
    }
  }

  get attrIsObserved() {
    return !!this.attrName;
  }

  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {
    if (this.aliasedAttrName) {
      pfeInstance.setAttribute(this.aliasedAttrName, newValue);
    } else if (this.aliasedPropName) {
      pfeInstance[this.aliasedPropName] = newValue;
    }
  }
}

class BooleanPropAndAttr extends PropAndAttr {
  constructor(attrName, propName, onChangeCallback, privatePropName) {
    super("boolean", attrName, propName, onChangeCallback);
    if (!attrName) {
      this.privatePropName = privatePropName || "_" + propName;
    }
  }

  defineProp(pfeInstance) {
    if (this.attrName) {
      this.getDefineFn(pfeInstance)(this.propName, this.attrName);
    } else {
      Object.defineProperty(pfeInstance, this.propName, {
        set: v => {
          const oldValue = pfeInstance[this.privatePropName];
          pfeInstance[this.privatePropName] = !!v;
          if (this.onChangeCallback) {
            this.onChangeCallback(pfeInstance, oldValue, v);
          }
        },
        get: () => pfeInstance[this.privatePropName],
        enumerable: true
      });
    }
  }
}

class FunctionPropAndAttr extends PropAndAttr {
  constructor(attrName, propName, onChangeCallback, privatePropName) {
    super("function", attrName, propName, onChangeCallback);
    if (!propName || typeof propName !== "string") {
      throw new Error("propName must be a non-empty string for functions");
    }
    this.privatePropName = privatePropName || "_" + propName;
  }

  defineProp(pfeInstance) {
    this.getDefineFn(pfeInstance)(
      this.propName,
      this.privatePropName,
      this.onChangeCallback
    );
  }

  get attrIsObserved() {
    return !!this.attrName;
  }

  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {
    propsAndAttrsAPI.object.onChange.bind(pfeInstance)(
      this.propName,
      this.attrName,
      oldValue,
      newValue
    );
  }
}

class NumberPropAndAttr extends PropAndAttr {
  constructor(type, attrName, propName, onChangeCallback, privatePropName) {
    super(type, attrName, propName, onChangeCallback);
    if (!attrName || privatePropName) {
      this.privatePropName = privatePropName || "_" + propName;
    }
  }

  parse(value) {
    return Number(value);
  }

  defineProp(pfeInstance) {
    if (this.privatePropName && this.attrName) {
      throw new Error(
        "Not implemented yet for " + this.type + " prop and attribute"
      );
    } else if (this.attrName) {
      Object.defineProperty(pfeInstance, this.propName, {
        set: v => {
          propsAndAttrsAPI.number.prop.setter.bind(pfeInstance)(
            this.attrName,
            v
          );
        },
        get: () => {
          if (pfeInstance.hasAttribute(this.attrName)) {
            return this.parse(pfeInstance.getAttribute(this.attrName));
          }
        },
        enumerable: true
      });
    } else {
      Object.defineProperty(pfeInstance, this.propName, {
        set: v => {
          const oldValue = pfeInstance[this.privatePropName];
          pfeInstance[this.privatePropName] = v;
        },
        get: () => pfeInstance[this.privatePropName],
        enumerable: true
      });
    }
  }

  get attrIsObserved() {
    return super.attrIsObserved || (this.privatePropName && this.attrName);
  }

  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {
    if (this.privatePropName && this.attrName) {
      throw new Error(
        "Not implemented yet for " + this.type + " prop and attribute"
      );
    } else {
      const oldNum = this.parse(oldValue);
      const newNum = this.parse(newValue);
      this.onChangeCallback(pfeInstance, oldNum, newNum);
    }
  }
}

class IntPropAndAttr extends NumberPropAndAttr {
  constructor(attrName, propName, onChangeCallback) {
    super("integer", attrName, propName, onChangeCallback);
  }

  parse(value) {
    return parseInt(value);
  }
}

class FloatPropAndAttr extends NumberPropAndAttr {
  constructor(attrName, propName, onChangeCallback) {
    super("float", attrName, propName, onChangeCallback);
  }

  parse(value) {
    return parseFloat(value);
  }
}

const errorWrapperElementNotDefined = new Error(
  "The wrapped element is not yet obtainable. The property must be set in a different way, or after the wrapped element is obtainable"
);

class WrappedPropAndAttr extends PropAndAttr {
  constructor(
    attrName,
    propName,
    onChangeCallback,
    getWrappedElementFn,
    wrappedAttrName,
    wrappedPropName
  ) {
    super("wrapped", attrName, propName, onChangeCallback);
    if (typeof getWrappedElementFn !== "function") {
      throw new Error(
        "getWrappedElementFn must be a function that returns an html element for wrapped prop and attr type"
      );
    }
    if (!wrappedAttrName && !wrappedPropName) {
      throw new Error(
        "one of wrappedAttrName and wrappedPropName must be defined, for wrapped prop and attr type"
      );
    }
    this.getWrappedElementFn = getWrappedElementFn;
    this.wrappedAttrName = wrappedAttrName;
    this.wrappedPropName = wrappedPropName;
  }

  updateAttrFromWrappedAttribute(pfeInstance) {
    const wrappedEl = this.getWrappedElementFn(pfeInstance);
    if (wrappedEl) {
      if (wrappedEl.hasAttribute(this.wrappedAttrName)) {
        pfeInstance.setAttribute(
          this.attrName,
          wrappedEl.getAttribute(this.wrappedAttrName)
        );
      } else {
        pfeInstance.removeAttribute(this.attrName);
      }
    } else {
      throw errorWrapperElementNotDefined;
    }
  }

  updateWrappedAttribute(pfeInstance, value) {
    const wrappedEl = this.getWrappedElementFn(pfeInstance);
    if (wrappedEl) {
      if (value != null) {
        wrappedEl.setAttribute(this.wrappedAttrName, value);
      } else {
        wrappedEl.removeAttribute(this.wrappedAttrName);
      }
    } else {
      throw errorWrapperElementNotDefined;
    }
  }

  defineProp(pfeInstance) {
    const attributes = { enumerable: true };

    if (this.wrappedPropName) {
      attributes.set = v => {
        const wrappedEl = this.getWrappedElementFn(pfeInstance);
        if (wrappedEl) {
          const oldValue = pfeInstance[this.propName];
          wrappedEl[this.wrappedPropName] = v;
          if (this.wrappedAttrName && this.attrName) {
            this.updateAttrFromWrappedAttribute(pfeInstance);
          } else if (this.onChangeCallback) {
            this.onChangeCallback(
              pfeInstance,
              oldValue,
              pfeInstance[this.propName]
            );
          }
        } else {
          // this could be implemented in the future
          throw errorWrapperElementNotDefined;
        }
        // to do! add onchange somewhere
      };
      attributes.get = () => {
        const wrappedEl = this.getWrappedElementFn(pfeInstance);
        if (wrappedEl) {
          return wrappedEl[this.wrappedPropName];
        } else {
          throw errorWrapperElementNotDefined;
        }
      };
    } else {
      // wrappedAttrName

      attributes.set = v => {
        const wrappedEl = this.getWrappedElementFn(pfeInstance);
        if (wrappedEl) {
          const oldValue = pfeInstance[this.propName];
          this.updateWrappedAttribute(pfeInstance, v);
          if (this.attrName) {
            this.updateAttrFromWrappedAttribute(pfeInstance);
          } else if (this.onChangeCallback) {
            this.onChangeCallback(
              pfeInstance,
              oldValue,
              pfeInstance[this.propName]
            );
          }
        } else {
          throw errorWrapperElementNotDefined;
        }
      };
      attributes.get = () => {
        const wrappedEl = this.getWrappedElementFn(pfeInstance);
        if (wrappedEl) {
          if (wrappedEl.hasAttribute(this.wrappedAttrName)) {
            return wrappedEl.getAttribute(this.wrappedAttrName);
          }
        } else {
          throw errorWrapperElementNotDefined;
        }
      };
    }

    Object.defineProperty(pfeInstance, this.propName, attributes);
  }

  get attrIsObserved() {
    return !!this.attrName;
  }

  onAttributeChangedLogic(pfeInstance, oldValue, newValue) {
    const wrapperEl = this.getWrappedElementFn(pfeInstance);
    if (wrapperEl) {
      if (oldValue !== newValue) {
        if (this.wrappedAttrName) {
          this.updateWrappedAttribute(pfeInstance, newValue);
          this.updateAttrFromWrappedAttribute(pfeInstance);
        } else if (this.propName) {
          pfeInstance[this.propName] = newValue;
        }
        if (this.onChangeCallback) {
          this.onChangeCallback(pfeInstance, oldValue, newValue);
        }
      }
    } else {
      throw errorWrapperElementNotDefined;
    }
  }
}

/*!
 * PatternFly Elements: PFElement 2.1.0-alpha.1
 * @license
 * Copyright 2020 Red Hat, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
*/
const prefix = "pfe-";

class PFElement extends HTMLElement {
  static create(pfe) {
    window.customElements.define(pfe.tag, pfe);
  }

  /**
   *
   * @returns {PropAndAttr[]}
   */
  static get propsAndAttrs() {
    return [];
  }

  static get propsAndAttrsAPI() {
    return {
      alias: AliasPropAndAttr,
      boolean: BooleanPropAndAttr,
      float: FloatPropAndAttr,
      function: FunctionPropAndAttr,
      integer: IntPropAndAttr,
      number: NumberPropAndAttr,
      object: ObjectPropAndAttr,
      string: StringPropAndAttr,
      wrapped: WrappedPropAndAttr
    };
  }

  propsAndAttrsConstructorLogic() {
    this._pfeClass.propsAndAttrs.forEach(propAndAttrInstance =>
      propAndAttrInstance.instanceConstructorLogic(this)
    );
  }

  propsAndAttrsOnAttributeChangedLogic(attrName, oldValue, newValue) {
    const foundElements = this._pfeClass.propsAndAttrs.filter(
      propAndAttrInstance => propAndAttrInstance.attrName === attrName
    );
    if (foundElements.length) {
      if (foundElements.length > 1) {
        throw new Error(
          "more than one attribute with the same name has been defined in propAndAttr api"
        );
      }
      foundElements[0].onAttributeChangedLogic(this, oldValue, newValue);
    }
  }

  static get propAndAttrsObservedAttributes() {
    return this.propsAndAttrs
      .filter(propAndAttrInstance => propAndAttrInstance.attrIsObserved)
      .map(propAndAttrInstance => propAndAttrInstance.attrName);
  }

  static debugLog(preference = null) {
    if (preference !== null) {
      PFElement._debugLog = !!preference;
    }
    return PFElement._debugLog;
  }

  static log(...msgs) {
    if (PFElement.debugLog()) {
      console.log(...msgs);
    }
  }

  static get PfeTypes() {
    return {
      Container: "container",
      Content: "content",
      Combo: "combo"
    };
  }

  static get version() {
    return "{{version}}";
  }

  static get observedAttributes() {
    return ["pfe-theme", ...this.propAndAttrsObservedAttributes];
  }

  get randomId() {
    return Math.random()
      .toString(36)
      .substr(2, 9);
  }

  get version() {
    return this._pfeClass.version;
  }

  get pfeType() {
    return this.getAttribute(`${prefix}type`);
  }

  set pfeType(value) {
    this.setAttribute(`${prefix}type`, value);
  }

  cssVariable(name, value, element = this) {
    name = name.substr(0, 2) !== "--" ? "--" + name : name;
    if (value) {
      element.style.setProperty(name, value);
    }
    return window
      .getComputedStyle(element)
      .getPropertyValue(name)
      .trim();
  }

  // Returns a single element assigned to that slot; if multiple, it returns the first
  has_slot(name) {
    return this.querySelector(`[slot='${name}']`);
  }

  // Returns an array with all elements assigned to that slot
  has_slots(name) {
    return [...this.querySelectorAll(`[slot='${name}']`)];
  }

  // Update the theme context for self and children
  context_update() {
    const children = this.querySelectorAll("[pfelement]");
    let theme = this.cssVariable("theme");

    // Manually adding `pfe-theme` overrides the css variable
    if (this.hasAttribute("pfe-theme")) {
      theme = this.getAttribute("pfe-theme");
      // Update the css variable to match the data attribute
      this.cssVariable("theme", theme);
    }

    // Update theme for self
    this.context_set(theme);

    // For each nested, already upgraded component
    // set the context based on the child's value of --theme
    // Note: this prevents contexts from parents overriding
    // the child's context should it exist
    [...children].map(child => {
      if (child.connected) {
        child.context_set(theme);
      }
    });
  }

  // Get the theme variable if it exists, set it as an attribute
  context_set(fallback) {
    let theme = this.cssVariable("theme");
    if (!theme) {
      theme = this.getAttribute("pfe-theme");
    }
    if (!theme && fallback) {
      theme = fallback;
    }
    if (theme) {
      this.setAttribute("on", theme);
    }
  }

  constructor(
    pfeClass,
    { type = null, delayRender = false, customRendering = false } = {}
  ) {
    super();

    this.connected = false;
    this._pfeClass = pfeClass;
    this.tag = pfeClass.tag;
    this.props = pfeClass.properties;
    this.slots = pfeClass.slots;
    this._queue = [];

    if (type) {
      this._queueAction({
        type: "setProperty",
        data: {
          name: "pfeType",
          value: type
        }
      });
    }

    this._connectedCallback = this._connectedCallback.bind(this);
    this._observer = new MutationObserver(this._connectedCallback); // not used yet, just created

    if (!customRendering) {
      this.template = document.createElement("template");

      this.log(`Constructing...`);

      if (this.tag !== "pfe-table") {
        this.attachShadow({ mode: "open" });
      }

      if (
        !delayRender &&
        (this.tag !== "pfe-navigation" ||
          this.tag !== "pfe-navigation-main" ||
          this.tag !== "pfe-navigation-item" ||
          this.tag !== "pfe-card")
      ) {
        if (!delayRender) {
          this.log(`Render...`);
          this.render();
          this.log(`Rendered.`);
        }
      } else {
        if (this.tag !== "pfe-table") {
          this.shadowRoot.innerHTML = `<slot></slot>`;
        }
      }
    }

    this.propsAndAttrsConstructorLogic();
  }

  connectedCallback() {
    if (
      this.tag === "pfe-navigation" ||
      this.tag === "pfe-navigation-main" ||
      this.tag === "pfe-navigation-item" ||
      this.tag === "pfe-card"
    ) {
      return new Promise(resolve => {
        setTimeout(() => {
          if (this.children.length) {
            this.render();
            this._connectedCallback();
            return resolve();
          }

          this._observer.observe(this, { childList: true });
        }, 0);
      });
    } else {
      this._connectedCallback();
    }
  }

  _connectedCallback() {
    this.connected = true;
    this.log(`Connecting...`);

    if (this.tag !== "pfe-table" && window.ShadyCSS) {
      this.log(`Styling...`);
      window.ShadyCSS.styleElement(this);
      // this.temporaryFixIE11EdgeSlotted();
      this.log(`Styled.`);
    }

    // Throw a warning if the on attribute was manually added before upgrade
    if (!this.hasAttribute("pfelement") && this.hasAttribute("on")) {
      console.warn(
        `${this.tag}${
          this.id ? `[#${this.id}]` : ``
        }: The "on" attribute is protected and should not be manually added to a component. The base class will manage this value for you on upgrade.`
      );
    }

    // @TODO maybe we should use just the attribute instead of the class?
    // https://github.com/angular/angular/issues/15399#issuecomment-318785677
    this.classList.add("PFElement");
    this.setAttribute("pfelement", "");

    if (typeof this.props === "object") {
      this._mapSchemaToProperties(this.tag, this.props);
      this.log(`Properties attached.`);
    }

    if (typeof this.slots === "object") {
      this._mapSchemaToSlots(this.tag, this.slots);
      this.log(`Slots attached.`);
    }

    if (this._queue.length) {
      this._processQueue();
    }

    // Initialize the on attribute if a theme variable is set
    // do not update the on attribute if a user has manually added it
    // then trigger an update in nested components
    this.context_update();

    this.log(`Connected.`);
  }

  temporaryFixIE11EdgeSlotted() {
    // ENABLE THIS PATCH WHEN SLOT ARE NOT SUPPORTED
    const tagName = `${this.tag}`;
    const getStyleTag = document.head.querySelector(`[scope^=${tagName}]`);

    if (getStyleTag) {
      let style = Array.from(document.styleSheets).find(item => {
        if (
          item.ownerNode &&
          item.ownerNode.getAttribute("scope").indexOf(tagName) !== -1
        ) {
          return item;
        }
        return null;
      });
      if (style) {
        let dynamicSlot = "";
        Array.from(style.cssRules || style.rules || []).forEach(rule => {
          if (
            rule.selectorText &&
            typeof rule.cssText === "string" &&
            rule.selectorText.indexOf("slot") > -1
          ) {
            dynamicSlot += " " + rule.cssText.replace(/>/gi, "");
          } else if (rule && typeof rule.cssText === "string") {
            dynamicSlot += " " + rule.cssText;
          }
        });
        if (dynamicSlot) {
          getStyleTag.innerText = dynamicSlot;
        }
      }
    }
  }

  disconnectedCallback() {
    this._observer.disconnect();
    this.log(`Disconnecting...`);

    this.connected = false;

    this.log(`Disconnected.`);
  }

  attributeChangedCallback(attr, oldVal, newVal) {
    if (this._pfeClass.cascadingAttributes) {
      const cascadeTo = this._pfeClass.cascadingAttributes[attr];
      if (cascadeTo) {
        this._copyAttribute(attr, cascadeTo);
      }

      if (attr === "pfe-theme") {
        this.context_update();
      }
    }

    this.propsAndAttrsOnAttributeChangedLogic(attr, oldVal, newVal);
  }

  _copyAttribute(name, to) {
    const recipients = [
      ...this.querySelectorAll(to),
      ...this.shadowRoot.querySelectorAll(to)
    ];
    const value = this.getAttribute(name);
    const fname = value == null ? "removeAttribute" : "setAttribute";
    for (const node of recipients) {
      node[fname](name, value);
    }
  }

  // Map the imported properties json to real props on the element
  // @notice static getter of properties is built via tooling
  // to edit modify src/element.json
  _mapSchemaToProperties(tag, properties) {
    this.log("Mapping properties...");
    // Loop over the properties provided by the schema
    Object.keys(properties).forEach(attr => {
      let data = properties[attr];

      // Only attach the information if the data provided is a schema object
      if (typeof data === "object") {
        // Prefix default is true
        let hasPrefix = true;
        let attrName = attr;
        // Set the attribute's property equal to the schema input
        this[attr] = data;
        // Initialize the value to null
        this[attr].value = null;

        if (typeof this[attr].prefixed !== "undefined") {
          hasPrefix = this[attr].prefixed;
        }

        if (hasPrefix) {
          attrName = `${prefix}${attr}`;
        }

        // If the attribute exists on the host
        if (this.hasAttribute(attrName)) {
          // Set property value based on the existing attribute
          this[attr].value = this.getAttribute(attrName);
        }
        // Otherwise, look for a default and use that instead
        else if (data.default) {
          const dependency_exists = this._hasDependency(tag, data.options);
          const no_dependencies =
            !data.options ||
            (data.options && !data.options.dependencies.length);
          // If the dependency exists or there are no dependencies, set the default
          if (dependency_exists || no_dependencies) {
            this.setAttribute(attrName, data.default);
            this[attr].value = data.default;
          }
        }
      }
    });

    this.log("Properties mapped.");
  }

  // Test whether expected dependencies exist
  _hasDependency(tag, opts) {
    // Get any possible dependencies for this attribute to exist
    let dependencies = opts ? opts.dependencies : [];
    // Initialize the dependency return value
    let hasDependency = false;
    // Check that dependent item exists
    // Loop through the dependencies defined
    for (let i = 0; i < dependencies.length; i += 1) {
      const slot_exists =
        dependencies[i].type === "slot" &&
        this.has_slots(`${tag}--${dependencies[i].id}`).length > 0;
      const attribute_exists =
        dependencies[i].type === "attribute" &&
        this.getAttribute(`${prefix}${dependencies[i].id}`);
      // If the type is slot, check that it exists OR
      // if the type is an attribute, check if the attribute is defined
      if (slot_exists || attribute_exists) {
        // If the slot does exist, add the attribute with the default value
        hasDependency = true;
        // Exit the loop
        break;
      }
    }
    // Return a boolean if the dependency exists
    return hasDependency;
  }

  // Map the imported slots json
  // @notice static getter of properties is built via tooling
  // to edit modify src/element.json
  _mapSchemaToSlots(tag, slots) {
    this.log("Validate slots...");
    // Loop over the properties provided by the schema
    Object.keys(slots).forEach(slot => {
      let slotObj = slots[slot];

      // Only attach the information if the data provided is a schema object
      if (typeof slotObj === "object") {
        let slotExists = false;
        let result = [];
        // If it's a named slot, look for that slot definition
        if (slotObj.namedSlot) {
          // Check prefixed slots
          result = this.has_slots(`${tag}--${slot}`);
          if (result.length > 0) {
            slotObj.nodes = result;
            slotExists = true;
          }

          // Check for unprefixed slots
          result = this.has_slots(`${slot}`);
          if (result.length > 0) {
            slotObj.nodes = result;
            slotExists = true;
          }
          // If it's the default slot, look for direct children not assigned to a slot
        } else {
          result = [...this.children].filter(
            child => !child.hasAttribute("slot")
          );

          if (result.length > 0) {
            slotObj.nodes = result;
            slotExists = true;
          }
        }

        // If the slot exists, attach an attribute to the parent to indicate that
        if (slotExists) {
          this.setAttribute(`has_${slot}`, "");
        } else {
          this.removeAttribute(`has_${slot}`);
        }
      }
    });
    this.log("Slots validated.");
  }

  _queueAction(action) {
    this._queue.push(action);
  }

  _processQueue() {
    this._queue.forEach(action => {
      this[`_${action.type}`](action.data);
    });

    this._queue = [];
  }

  _setProperty({ name, value }) {
    this[name] = value;
  }

  // @TODO This is a duplicate function to cssVariable above, combine them
  static var(name, element = document.body) {
    return window
      .getComputedStyle(element)
      .getPropertyValue(name)
      .trim();
  }

  var(name) {
    return PFElement.var(name, this);
  }

  render() {
    this.shadowRoot.innerHTML = "";
    this.template.innerHTML = this.html;

    if (window.ShadyCSS) {
      window.ShadyCSS.prepareTemplate(this.template, this.tag);
    }

    this.shadowRoot.appendChild(this.template.content.cloneNode(true));
  }

  log(...msgs) {
    PFElement.log(`[${this.tag}]`, ...msgs);
  }

  emitEvent(
    name,
    { bubbles = true, cancelable = false, composed = false, detail = {} } = {}
  ) {
    this.log(`Custom event: ${name}`);
    this.dispatchEvent(
      new CustomEvent(name, {
        bubbles,
        cancelable,
        composed,
        detail
      })
    );
  }

  getUniqueId(prefix = "id") {
    let id = prefix;
    for (let i = 1; document.getElementById(id); i++) {
      id = prefix + "-" + i;
    }
    return id;
  }
}

autoReveal(PFElement.log);

export default PFElement;
//# sourceMappingURL=pfelement.js.map
