/// ===========================================================================
/// mixins for box shadows - WIP
/// ===========================================================================

@mixin box-shadow($values, $color) {
  --pfe-#{$LOCAL}--BoxShadow: #{$values $color};
}
$box-shadow: (
  10: 0 2px 4px,
  20: 0 5px 10px,
  40: 0 9px 10px,
  60: 0 20px 30px,
  80: 0 30px 30px,
  100: 0 50px 50px
);

// to do: add region
@mixin pfeBoxShadows-generator($sha-color, $color-name) {
  @each $box-shadow-name, $box-shadow-values in $box-shadow {
    :host([shadow="#{$color-name}-#{$box-shadow-name}"]) {
      @include box-shadow($box-shadow-values, $sha-color); 
    }
  }
}

@mixin box-shadow-percentage($percentage, $color) {
  @include box-shadow(map-get($box-shadow, $percentage), $color);
}

@mixin pfeBoxShadows-color($color-name) {
  @if $color-name == light {
    @include pfeBoxShadows-generator(rgba(0, 0, 0, 0.1), $color-name);
  } @else if $color-name == dark {
    @include pfeBoxShadows-generator(rgba(0, 0, 0, 0.4), $color-name);
  }
}


@mixin pfeBoxShadows-full() {
  $color-list: (light, dark);
  @each $color-name in $color-list {
    @include pfeBoxShadows-color($color-name);
  }
  :host([shadow="none"]) {
    --pfe-#{$LOCAL}--BoxShadow: none;
  }
}

/// ===========================================================================
/// mixins for border radius - WIP
/// ===========================================================================

$radius-list: (0, 5, 8, 10, 20, 25);
@mixin pfeBorderRadius($value) {
  :host([border-radius="#{$value}"]) {
    $value: #{$value}px;
    @include pfe-set-local((BorderRadius: $value));
  }
}

@mixin pfeBorderRadius--full() {
  @each $radius in $radius-list {
    @include pfeBorderRadius($radius)
  }
}

/// ===========================================================================
/// mixin and function for linear gradient - WIP
/// ===========================================================================

@mixin bgLinearGradient($angle, $first-color, $second-color, $modifier: null) {
  $variable-name: --#{$repo}-#{$LOCAL}--BackgroundImage;
  @if $modifier != null {
    $variable-name: #{$variable-name}--#{$modifier};
  }
  #{$variable-name}: #{linearGradient($angle, $first-color, $second-color)};
}
@function linearGradient($angle, $first-color, $second-color) {
  @return linear-gradient(#{$angle}, #{$first-color} 0%, #{$second-color} 100%);
}

$gradient-list: (
  miami: (
    first-color: pfe-color(surface--complement),
    second-color: pfe-color(surface--accent)
  ),
  winter: (
    first-color: var(--pfe-theme--color--gradient-winter-first, $temp-blue-fluo),
    second-color: var(--pfe-theme--color--gradient-winter-second, $temp-blue-frozen)
  ),
  soft: (
    first-color: var(--pfe-theme--color--gradient-soft-first, $temp-gradient-soft-first-color), // to do add colors to crayon
    second-color: var(--pfe-theme--color--gradient-soft-second, $temp-gradient-soft-second-color)
  ),
  sunny: (
    first-color: var(--pfe-theme--color--gradient-sunny-first, $pfelements--orange),
    second-color: var(--pfe-theme--color--gradient-sunny-second, $pfelements--orange)
  ),
);
$gradient-direction-list: (
  vertical: 30deg, // to be checked
  horizontal: 70deg,
);

@function get-gradient($name, $direction) {
  $angle:  map-get($gradient-direction-list, $direction);
  $gradient-colors: map-get($gradient-list, $name);
  $first-color: map-get($gradient-colors, first-color);
  $second-color: map-get($gradient-colors, second-color);
  @return linearGradient($angle, $first-color, $second-color);
}

@mixin gradient-full() {
  @each $gradient-type, $gradient-colors in $gradient-list {
    $first-color: map-get($gradient-colors, first-color);
    $second-color: map-get($gradient-colors, second-color);
      @each $gradient-direction, $angle in $gradient-direction-list {
      :host([gradient=#{$gradient-type}-#{$gradient-direction}]) {
        --#{$repo}-#{$LOCAL}--BackgroundImage: #{linearGradient($angle, $first-color, $second-color)};
      }
    }
  }
}

/// ===========================================================================
/// mixin font-face - WIP
/// ===========================================================================
@mixin font-face($variants, $family) {
  @import url('//fonts.googleapis.com/css?family=#{$family}:#{to-string($variants, ",")}');
}

/// ===========================================================================
/// mixin for scrollbar styling
/// ===========================================================================

@mixin scrollbar-styling() {
  // width
  &::-webkit-scrollbar {
    width: 4px;
  }
  
  // Track
  &::-webkit-scrollbar-track {
    background: transparent; 
  }
   
  // Handle
  &::-webkit-scrollbar-thumb {
    background: #{pfe-color(ui-complement)}; 
    border-radius: 2px;
  }
  
  // Handle on hover
  // ::-webkit-scrollbar-thumb:hover {
  // }
}

/// ===========================================================================
/// set color of text, links and icons inside the element
/// ===========================================================================

@mixin set-broadcasted($value, $variables:(text, link, link--visited, link--hover, link--focus)) {
  @each $variable-name in $variables {
    --pfe-broadcasted--#{$variable-name}: #{$value};
  }
}

/// ===========================================================================
/// Reset mixins
/// ===========================================================================

@mixin reset-btn {
  appearance: none;
  display: block;
  padding: 0;
  border: none;
  cursor: pointer;
}

/// ===========================================================================
/// mixins and function for attribute selectors
/// ===========================================================================

@function boolean-attribute-selector($name) {
  @return '[#{$name}]:not([#{$name}="false"])';
}

@mixin boolean-attribute($name, $boolean: true) {
  @if ($boolean) {
    :host(#{boolean-attribute-selector($name)}) {
      @content;
    }
  } @else {
    :host([#{$name}="false"]), :host(:not([#{$name}])) {
      @content;
    }
  }
}
